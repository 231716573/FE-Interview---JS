1.用JS将字符串 '[{"a":"1", "b":"2", "c":"3"}]' 转为数组，然后弹出a下面的1.

  答案1： var str = "[{'a':'1', 'b':'2' , 'c': '3'}]";
        str = eval("("+str+")")
        console.log(str[0].a)
      

2. a++ 与 ++a 区别
  var a=10, b=20, c=30;
  ++a;  // 11
  a++;  // 11
  e = ++a+(++b)+(c++)+a++; // 13+(21)+(30)+13;
  console.log(e);  //77

3.变量提升以及函数作用域
  3.1
    f1()
    console.log("."+a); // 报错，提示 a is not defined
    console.log("."+b);
    console.log("."+c);
    function f1(){
        var a=b=c=9;
        console.log(a); // 9
        console.log(b); // 9
        console.log(c); // 9
    }
  3.2
    var a = 18;
    f1();
    function f1(){
        var b = 9;
        console.log(a);  // undefined
        console.log(b);  // 9;
        var a = '123';
    }

4.题目：填写内容让下面代码支持a.name = “name1”; b.name = “name2”;
function obj(name){
    _______
}
obj._____ = "name2";
var a = obj("name1");
var b = new obj;

答案：//创建全局函数
    function obj(name){
         if(name) {        // 区分普通调用和实例化调用
            this.name = name;
          }
          return this;    // 返回this引用，调用时this指向window
    }

    obj.prototype.name = "name2";    // 设置原型对象
    var a = obj("name1");    //直接调用函数，a等于window，name为window的属性。
    var b = new obj;    //调用函数实例化对象，this指向obj的实例化对象。
    
    
5.

1、person1.__proto__ 是什么？
2、Person.__proto__ 是什么？
3、Person.prototype.__proto__ 是什么？
4、Object.__proto__ 是什么？
5、Object.prototype__proto__ 是什么？

答案：
第一题：
因为 person1.__proto__ === person1 的构造函数.prototype
因为 person1的构造函数 === Person
所以 person1.__proto__ === Person.prototype

第二题：
因为 Person.__proto__ === Person的构造函数.prototype
因为 Person的构造函数 === Function
所以 Person.__proto__ === Function.prototype

第三题：
Person.prototype 是一个普通对象，我们无需关注它有哪些属性，只要记住它是一个普通对象。
因为一个普通对象的构造函数 === Object
所以 Person.prototype.__proto__ === Object.prototype

第四题，参照第二题，因为 Person 和 Object 一样都是构造函数
                Object.__proto__ == Function.prototype

第五题：
Object.prototype 对象也有proto属性，但它比较特殊，为 null 。因为 null 处于原型链的顶端，这个只能记住。
Object.prototype.__proto__ === null
